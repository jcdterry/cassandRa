detach("package:EcoLinkPredict", unload = TRUE)
library(EcoLinkPredict)
demoweb<-make_true_and_sample_web(seed = 4,specpar =  2, n_hosts = 25,n_wasps =  25,
TargetTrueConn = 0.3, SampleObs = 800, traitvsnested = 0.1)
demoweb<- FitAllModels(demoweb)
demoweb<- TestAllModels(demoweb)
warnings()
demoweb
library(devtools)
document()
build()
install.packages("C:/Users/pemb4504/Dropbox/0DrosPostdoc/EcoLinkPredict_0.1.0.tar.gz", repos = NULL, type = "source")
detach("package:EcoLinkPredict", unload = TRUE)
library(EcoLinkPredict)
list('maxit' = maxit, ExtraSettings)
list('maxit' = 10000, ExtraSettings)
list('maxit' = 10000, NULL)
n_SBM= 10
G=NULL
library(devtools)
document()
build()
install.packages("C:/Users/pemb4504/Dropbox/0DrosPostdoc/EcoLinkPredict_0.1.0.tar.gz", repos = NULL, type = "source")
detach("package:EcoLinkPredict", unload = TRUE)
library(EcoLinkPredict)
demoweb<-make_true_and_sample_web(seed = 4,specpar =  2, n_hosts = 25,n_wasps =  25,
TargetTrueConn = 0.3, SampleObs = 800, traitvsnested = 0.1)
demoweb<- FitAllModels(demoweb)
demoweb<- TestAllModels(demoweb)
library(devtools)
library(devtools)
document()
build()
spell_check()
document()
source('C:/Users/pemb4504/Dropbox/0DrosPostdoc/EcoLinkPredict/R/Rarefy.R', encoding = 'UTF-8')
data(Safariland, package= 'bipartite')
source('~/.active-rstudio-document', echo=TRUE)
Safariland
()
knitr::kable(Safariland()
knitr::kable(Safariland)
PredictLinks<- function(web, RepeatModels = 10, SaveName = NULL){
SF <- CreateListObject(web)
LIST <- FitAllModels(SF, RepeatModels = 10, SaveName = NULL)
SortResponseCategory(LIST)
}
source('C:/Users/pemb4504/Dropbox/0DrosPostdoc/EcoLinkPredict/R/FitMatching.R')
library(devtools)
document()
build()
install.packages("C:/Users/pemb4504/Dropbox/0DrosPostdoc/EcoLinkPredict_0.1.0.tar.gz", repos = NULL, type = "source")
PredictFit <- PredictLinks(Safariland , RepeatModels = 1) # Set to 1 here for speed
detach("package:EcoLinkPredict", unload = TRUE)
library(EcoLinkPredict)
#' Generates a network list from a food web and fits all network models
#'
#' First calls \code{CreateListObject} to convert a matrix suitable for the bipartite package into a list structure.
#'
#' Then it calls \code{FitAllModels} to fit each of the missing link models in turn.
#'
#'
#'
#' @param web in format specified by the bipartite package. Rows = focal layer, columns = response layer
#'
#' param RepeatModels
#' @return A network list including a large number of outputs.
#' @export
#'
#' @examples
# \dontrun{
#' data(Safariland, 'bipartite')
#' tmp<- PredictLinks(Safariland)
#' PlotFit(tmp, Matrix_to_plot = 'SBM')
#' }
PredictLinks<- function(web, RepeatModels = 10){
SF <- CreateListObject(web)
list <- FitAllModels(SF, RepeatModels = RepeatModels, SaveName = NULL)
reshape2::melt(list$C_ProbsMatrix)%>%
dplyr::rename('Centrality_Prob' = value)%>%
select( Centrality_Prob) -> C_probs
reshape2::melt(list$M_ProbsMatrix)%>%
dplyr::rename('Matching_Prob' = value)%>%
select(Matching_Prob) -> M_probs
reshape2::melt(list$B_ProbsMat)%>%
dplyr::rename( 'Both_Prob' = value)%>%
select(Both_Prob) -> B_probs
reshape2::melt( list$SBM_ProbsMat)%>%
dplyr::rename( 'SBM_Prob' = value)%>%
select( SBM_Prob) -> SBM_probs
reshape2::melt(list$C_defmatrix)%>%
dplyr::rename('C_def_Prob' = value)%>%
select( C_def_Prob) -> C_def_probs
expand.grid(list$HostNames, list$WaspNames, stringsAsFactors = FALSE)%>%
as.data.frame()%>%
transmute(Interaction = paste(Var1,Var2, sep=' - ')) -> Names
reshape2::melt(list$obs>0)%>%
dplyr::rename('Observed' = value)%>%
mutate(int_code = paste(Var1,Var2, sep='_'))%>%
select(int_code, Observed) -> Observed
DF <- bind_cols( Names,Observed, C_probs, M_probs, B_probs, SBM_probs, C_def_probs)
to_Std_df <- filter(DF, Observed==FALSE)
DF %>%
mutate(std_Centrality_Prob  = ifelse(Observed,NA,  Centrality_Prob    / mean( to_Std_df$Centrality_Prob) ),
std_Matching_Prob    = ifelse(Observed,NA,  Matching_Prob    / mean( to_Std_df$Matching_Prob) ),
std_Both_Prob        = ifelse(Observed,NA,  Both_Prob    / mean( to_Std_df$Both_Prob) ),
std_SBM_Prob         = ifelse(Observed,NA,  SBM_Prob   / mean( to_Std_df$SBM_Prob) ),
std_C_def_Prob       = ifelse(Observed,NA,  C_def_Prob/ mean( to_Std_df$C_def_Prob) ))-> STDDF
list$Predictions <- STDDF
return(list)
}
PredictFit <- PredictLinks(Safariland , RepeatModels = 1) # Set to 1 here for speed
detach("package:EcoLinkPredict", unload = TRUE)
library(devtools)
document()
build()
install.packages("C:/Users/pemb4504/Dropbox/0DrosPostdoc/EcoLinkPredict_0.1.0.tar.gz", repos = NULL, type = "source")
detach("package:EcoLinkPredict", unload = TRUE)
library(EcoLinkPredict)
library(devtools)
document()
build()
install.packages("C:/Users/pemb4504/Dropbox/0DrosPostdoc/EcoLinkPredict_0.1.0.tar.gz", repos = NULL, type = "source")
detach("package:EcoLinkPredict", unload = TRUE)
library(EcoLinkPredict)
document()
build()
install.packages("C:/Users/pemb4504/Dropbox/0DrosPostdoc/EcoLinkPredict_0.1.0.tar.gz", repos = NULL, type = "source")
detach("package:EcoLinkPredict", unload = TRUE)
library(EcoLinkPredict)
library(EcoLinkPredict)
data(Safariland, package= 'bipartite')
knitr::kable(Safariland)
PredictFit <- PredictLinks(Safariland , RepeatModels = 1) # Set to 1 here for speed
#PredictFit$
PlotFit(PredictFit, Matrix_to_plot = 'SBM')
PredictFit <- PredictLinks(Safariland , RepeatModels = 1) # Set to 1 here for speed
str(PredictFit)
PredictFit$Predictions
head(PredictFit$Predictions)
document()
build()
install.packages("C:/Users/pemb4504/Dropbox/0DrosPostdoc/EcoLinkPredict_0.1.0.tar.gz", repos = NULL, type = "source")
detach("package:EcoLinkPredict", unload = TRUE)
library(EcoLinkPredict)
PlotFit(PredictFit, Matrix_to_plot = c('SBM', 'C_def'), OrderBy = 'Degree', Combine = '+', title = 'combined SBM and Coverage Deficit Model') + guides(fill= FALSE, col=FALSE)
require(ggplot2)
PlotFit(PredictFit, Matrix_to_plot = c('SBM', 'C_def'), OrderBy = 'Degree', Combine = '+', title = 'combined SBM and Coverage Deficit Model') + guides(fill= FALSE, col=FALSE)
RarefyNetwork(Safariland, n_per_level = 100)
source('C:/Users/pemb4504/Dropbox/0DrosPostdoc/EcoLinkPredict/R/Rarefy.R', encoding = 'UTF-8')
RarefyNetwork(Safariland, n_per_level = 100)
# Chunk 1: setup
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
require(bipartite)
require(EcoLinkPredict)
require(purrr)
require(parallel)
require(dplyr)
require(tidyr)
require(ggplot2)
# Chunk 2
data(Safariland, package= 'bipartite')
# Chunk 3
PredictFit <- PredictLinks(Safariland , RepeatModels = 1) # Set to 1 here for speed in the vignette
head(PredictFit$Predictions)
RarefyNetwork(Safariland, n_per_level = 100)
MetricsAfterReSampling<- RarefyNetwork(Safariland, n_per_level = 100)
PlotRarefaction(MetricsAfterReSampling)
PlotRarefaction(MetricsAfterReSampling)
source('C:/Users/pemb4504/Dropbox/0DrosPostdoc/EcoLinkPredict/R/Rarefy.R', encoding = 'UTF-8')
PlotRarefaction(MetricsAfterReSampling)
ComputeCI(MetricsAfterReSampling)
library(devtools)
document()
build()
install.packages("C:/Users/pemb4504/Dropbox/0DrosPostdoc/EcoLinkPredict_0.1.0.tar.gz", repos = NULL, type = "source")
detach("package:EcoLinkPredict", unload = TRUE)
library(EcoLinkPredict)
ComputeCI(MetricsAfterReSampling)
MetricsAfterReSampling<- RarefyNetwork(Safariland, n_per_level = 100, metrics = 'quantitative')
PlotRarefaction(MetricsAfterReSampling)
# Chunk 1: setup
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
require(bipartite)
require(EcoLinkPredict)
require(purrr)
require(parallel)
require(dplyr)
require(tidyr)
require(ggplot2)
# Chunk 2
data(Safariland, package= 'bipartite')
# Chunk 3
PredictFit <- PredictLinks(Safariland , RepeatModels = 1) # Set to 1 here for speed in the vignette
head(PredictFit$Predictions)
MetricsAfterReSampling<- RarefyNetwork(Safariland, n_per_level = 100, metrics = 'quantitative')
MetricsAfterReSampling
source('C:/Users/pemb4504/Dropbox/0DrosPostdoc/EcoLinkPredict/R/Rarefy.R', encoding = 'UTF-8')
MetricsAfterReSampling<- RarefyNetwork(Safariland, n_per_level = 100, metrics = 'quantitative')
MetricsAfterReSampling
library(devtools)
document()
build()
install.packages("C:/Users/pemb4504/Dropbox/0DrosPostdoc/EcoLinkPredict_0.1.0.tar.gz", repos = NULL, type = "source")
detach("package:EcoLinkPredict", unload = TRUE)
library(EcoLinkPredict)
library(EcoLinkPredict)
MetricsAfterReSampling<- RarefyNetwork(Safariland, n_per_level = 100, metrics = 'quantitative')
PlotRarefaction(MetricsAfterReSampling)
source('C:/Users/pemb4504/Dropbox/0DrosPostdoc/EcoLinkPredict/R/Rarefy.R', encoding = 'UTF-8')
source('C:/Users/pemb4504/Dropbox/0DrosPostdoc/EcoLinkPredict/R/Rarefy.R', encoding = 'UTF-8')
library(devtools)
document()
build()
install.packages("C:/Users/pemb4504/Dropbox/0DrosPostdoc/EcoLinkPredict_0.1.0.tar.gz", repos = NULL, type = "source")
detach("package:EcoLinkPredict", unload = TRUE)
library(EcoLinkPredict)
# Chunk 1: setup
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
require(bipartite)
require(EcoLinkPredict)
require(purrr)
require(parallel)
require(dplyr)
require(tidyr)
require(ggplot2)
# Chunk 2
data(Safariland, package= 'bipartite')
# Chunk 3
PredictFit <- PredictLinks(Safariland , RepeatModels = 1) # Set to 1 here for speed in the vignette
head(PredictFit$Predictions)
# Chunk 4
PlotFit(PredictFit, Matrix_to_plot = 'SBM')
PlotFit(PredictFit,
Matrix_to_plot = c('SBM', 'C_def'),Combine = '+',
OrderBy = 'Degree',
title = 'Combined SBM and Coverage Deficit Model') + guides(fill= FALSE, col=FALSE)
MetricsAfterReSampling<- RarefyNetwork(Safariland, n_per_level = 100, metrics = 'quantitative')
PlotRarefaction(MetricsAfterReSampling)
RarefyNetwork
detach("package:EcoLinkPredict", unload = TRUE)
library(EcoLinkPredict)
detach("package:EcoLinkPredict", unload = TRUE)
library(EcoLinkPredict)
RarefyNetwork
detach("package:EcoLinkPredict", unload = TRUE)
library(devtools)
document()
build()
install.packages("C:/Users/pemb4504/Dropbox/0DrosPostdoc/EcoLinkPredict_0.1.0.tar.gz", repos = NULL, type = "source")
detach("package:EcoLinkPredict", unload = TRUE)
library(EcoLinkPredict)
RarefyNetwork
detach("package:EcoLinkPredict", unload = TRUE)
library(EcoLinkPredict)
RarefyNetwork
detach("package:EcoLinkPredict", unload = TRUE)
document()
library(devtools)
document()
build()
install.packages("C:/Users/pemb4504/Dropbox/0DrosPostdoc/EcoLinkPredict_0.1.0.tar.gz", repos = NULL, type = "source")
detach("package:EcoLinkPredict", unload = TRUE)
library(EcoLinkPredict)
RarefyNetwork
library(devtools)
document()
build()
install.packages("C:/Users/pemb4504/Dropbox/0DrosPostdoc/EcoLinkPredict_0.1.0.tar.gz", repos = NULL, type = "source")
detach("package:EcoLinkPredict", unload = TRUE)
library(EcoLinkPredict)
PlotFit(PredictFit, Matrix_to_plot = 'SBM')
PlotFit(PredictFit,
Matrix_to_plot = c('SBM', 'C_def'),Combine = '+',
OrderBy = 'Degree',
title = 'Combined SBM and Coverage Deficit Model') + guides(fill= FALSE, col=FALSE)
# Chunk 1: setup
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
require(bipartite)
require(EcoLinkPredict)
require(purrr)
require(parallel)
require(dplyr)
require(tidyr)
require(ggplot2)
# Chunk 2
data(Safariland, package= 'bipartite')
# Chunk 3
PredictFit <- PredictLinks(Safariland , RepeatModels = 1) # Set to 1 here for speed in the vignette
head(PredictFit$Predictions)
MetricsAfterReSampling<- RarefyNetwork(Safariland, n_per_level = 100, metrics = 'quantitative')
PlotRarefaction(MetricsAfterReSampling)
MetricsAfterReSampling<- RarefyNetwork(Safariland, n_per_level = 100, metrics = 'info')
'H2', 'weighted nestedness',
PlotRarefaction(MetricsAfterReSampling)
MetricsAfterReSampling<- RarefyNetwork(Safariland, n_per_level = 100,
metrics = c('H2', 'weighted nestedness', 'links per species'))
PlotRarefaction(MetricsAfterReSampling)
ComputeCI(MetricsAfterReSampling)
RarefyNetwork(Safariland, n_per_level = 100,abs_sample_levels = c(500, 1000, 2000), metrics = 'info', output = 'plot')
RarefyNetwork
RarefyNetwork(Safariland, n_per_level = 100,abs_sample_levels = c(500, 1000, 2000), metrics = 'info', output = 'plot')
RarefyNetwork
library(devtools)
document()
build()
install.packages("C:/Users/pemb4504/Dropbox/0DrosPostdoc/EcoLinkPredict_0.1.0.tar.gz", repos = NULL, type = "source")
detach("package:EcoLinkPredict", unload = TRUE)
library(EcoLinkPredict)
# Chunk 1: setup
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
require(bipartite)
require(EcoLinkPredict)
require(purrr)
require(parallel)
require(dplyr)
require(tidyr)
require(ggplot2)
# Chunk 2
data(Safariland, package= 'bipartite')
# Chunk 3
PredictFit <- PredictLinks(Safariland , RepeatModels = 1) # Set to 1 here for speed in the vignette
head(PredictFit$Predictions)
# Chunk 4
PlotFit(PredictFit, Matrix_to_plot = 'SBM')
PlotFit(PredictFit,
Matrix_to_plot = c('SBM', 'C_def'),Combine = '+',
OrderBy = 'Degree',
title = 'Combined SBM and Coverage Deficit Model') + guides(fill= FALSE, col=FALSE)
MetricsAfterReSampling<- RarefyNetwork(Safariland, n_per_level = 100,
metrics = c('H2', 'weighted nestedness', 'links per species'))
ComputeCI(MetricsAfterReSampling)
PlotRarefaction(MetricsAfterReSampling)
MetricsAfterReSampling<- RarefyNetwork(Safariland, n_per_level = 100,
metrics = c('H2', 'nestedness', 'links per species'))
PlotRarefaction(MetricsAfterReSampling)
ComputeCI(MetricsAfterReSampling)
RarefyNetwork(Safariland, n_per_level = 100,abs_sample_levels = c(500, 1000, 2000), metrics = 'info', output = 'plot')
RarefyNetwork(Safariland, n_per_level = 100,abs_sample_levels = c(500, 1000, 20000), metrics = 'info', output = 'plot')
citation(EcolLinkPredict)
citation('EcolLinkPredict')
require(EcoLinkPredict)
citation('EcolLinkPredict')
citation('bipartite')
head(signif(PredictFit$Predictions,4))
session_info()
session_info
RarefyNetwork
# Chunk 1: setup
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
require(bipartite)
require(EcoLinkPredict)
require(purrr)
require(parallel)
require(dplyr)
require(tidyr)
require(ggplot2)
# Chunk 2
data(Safariland, package= 'bipartite')
# Chunk 3
MetricsAfterReSampling<- RarefyNetwork(Safariland, n_per_level = 100,
metrics = c('H2', 'nestedness', 'links per species'))
PlotRarefaction(MetricsAfterReSampling)
ComputeCI(MetricsAfterReSampling)
# Chunk 4
RarefyNetwork(Safariland,
n_per_level = 100,
abs_sample_levels = c(500, 1000, 5000),
metrics = 'info',
output = 'plot')
PredictFit <- PredictLinks(Safariland , RepeatModels = 1) # Set to 1 here for speed in the vignette
head(signif(PredictFit$Predictions,4))
PredictFit$Predictions
knitr::kable(head(PredictFit$Predictions), digits = 4)
library(devtools)
document()
build()
install.packages("C:/Users/pemb4504/Dropbox/0DrosPostdoc/EcoLinkPredict_0.1.0.tar.gz", repos = NULL, type = "source")
detach("package:EcoLinkPredict", unload = TRUE)
library(EcoLinkPredict)
check_built()
check
check_cran()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::spell_check()
devtools::spell_check()
library(devtools)
document()
build()
install.packages("C:/Users/pemb4504/Dropbox/0DrosPostdoc/EcoLinkPredict_0.1.0.tar.gz", repos = NULL, type = "source")
detach("package:EcoLinkPredict", unload = TRUE)
library(EcoLinkPredict)
check_rhub()
library(rhub)
library(devtools#)
library(devtools)
library(devtools)
document()
build()
library(rhub)
check_on_linux()
check_rhub()
source('C:/Users/pemb4504/Dropbox/0DrosPostdoc/EcoLinkPredict/R/PlotFit.R')
document()
library(devtools#)
library(devtools)
document()
build()
install.packages("C:/Users/pemb4504/Dropbox/0DrosPostdoc/EcoLinkPredict_0.1.0.tar.gz", repos = NULL, type = "source")
source('C:/Users/pemb4504/Dropbox/0DrosPostdoc/EcoLinkPredict/R/PlotFit.R')
source('C:/Users/pemb4504/Dropbox/0DrosPostdoc/EcoLinkPredict/R/PlotFit.R')
source('C:/Users/pemb4504/Dropbox/0DrosPostdoc/EcoLinkPredict/R/PlotFit.R')
source('C:/Users/pemb4504/Dropbox/0DrosPostdoc/EcoLinkPredict/R/PlotFit.R')
document()
build()
library(devtools)
document()
build()
install.packages("C:/Users/pemb4504/Dropbox/0DrosPostdoc/EcoLinkPredict_0.1.0.tar.gz", repos = NULL, type = "source")
build()
library(devtools)
build()
document()
check_rhub()
library(devtools)
build()
check_rhub()
rhub::list_validated_emails()
check_rhub(email = 'christerry3@btinternet.com')#
rhub::validate_email(christerry3@btinternet.com)
rhub::validate_email('christerry3@btinternet.com')
rhub::validate_email('james.terry@zoo.ox.ac.uk')
rhub::validate_email('christerry3@btinternet.com', token = '4dbec82c1119470b8cd9ff3a9080fcd7'
)
rhub::list_validated_emails()
check_rhub()
document()
build_vignettes()
rhub::validate_email('james.terry@zoo.ox.ac.uk', '752484e594804b7facbe1a7154850f66')
Safariland[1:5, 1:3]
data(Safariland, package= 'bipartite')
Safariland[1:5, 1:3]
library(cassandRa)
library(devtools)
document()
build)
build()
#' @param df A data frame produced by RarefyNetwork
#'
#' @return a dataframe detailing confidence intervals at each tested sample size
#'
#' @examples
#'  \dontrun{
#'  X<-RarefyNetwork(Safariland, n_per_level = 100)
#'  PlotRarefaction(X)
#'  }
#' @export
ComputeCI <- function(df){
map_df(unique(df$SampleSize),function(Size, df){
dfs<- dplyr::filter(df, SampleSize ==  Size)
CI_df <-  data.frame('Metric' = colnames(dfs)[-ncol(dfs)],
LowerCI = NA,
UpperCI = NA,
Mean = colMeans(dfs[,-ncol(dfs)], na.rm = TRUE),
SampleSize = Size)
for(j in 1: (ncol(df)-1)){
V <-dfs[,j]
if(any(is.na(V))){
warning(paste('One or more NA in metric:', colnames(df)[j],'at size', Size ))
}
V<- V[!is.na(V)]
n005<-floor(length(V)*0.95)
n095<-floor(length(V)*0.05)
CI_df[j, c(2,3)]  <-sort(V, decreasing = TRUE)[c(n005,n095 )]
}
CI_df
} ,   df=df )%>%
dplyr::arrange(Metric)
}
ComputeCI
build()
document()
build()
check_rhub()
install.packages("pROC")
library(cassandRa)
